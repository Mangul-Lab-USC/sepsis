# Concordance
# higher the concordance, the better is the quality of model
Concordance(trainingData$survivor, glm.prob)
# sensitivity and specificity
sensitivity(trainingData$survivor, glm.prob)
specificity(trainingData$survivor, glm.prob)
# Misclassification Error
# percentage mismatch of predcited vs actuals, irrespective of 1’s or 0’s.
# The lower the misclassification error, the better is your model.
misClassError(trainingData$survivor,glm.prob)
# open a png file
png('../figures/roc_cell+score.png', height = 2300, width = 2300, res = 300)
# set ncols and nrows
par(mfcol = c(2,2))
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE27131','GSE32707','GSE33341','GSE40586',
'GSE54514','GSE66890')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i]&celltypes$AgeGroup == 'Adults',]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves for Adults',lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .5)
dev.off()
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE27131','GSE32707','GSE33341','GSE40586',
'GSE54514','GSE66890')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i]&celltypes$AgeGroup == 'Adults',]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves for Adults',lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .5)
### plot roc curves for adults
list<-list()
### plot roc curves for adults
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Predicting Mortality Using \n Clinical Scores and Cell Types Data',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Predicting Mortality Using \n Clinical Scores and Cell Types Data \n',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = '\n ROC Curves: Predicting Mortality Using \n Clinical Scores and Cell Types Data \n',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .5)
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = '\n ROC Curves: Predicting Mortality Using \n Clinical Scores and Cell Types Data \n',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .5)
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Predicting Mortality Using Clinical Scores and Cell Types Data',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .5)
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Clinical Scores and Cell Types Data',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .5)
png('../figures/roc_cell+score.png', height = 1800, width = 1800, res = 300)
### plot roc curves for adults
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Clinical Scores and Cell Types Data',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .9)
dev.off()
View(gene)
# gene expression
for (i in 9:67){
print(names(gene)[i])
result = wilcox.test(survivor[,i],death[,i])
print(result)}
library(limma)
View(trainingData)
summary(trainingData$accession)
table(trainingData$accession)
test<-read.csv('../../sepsis_data/raw_data/GSE33341_RAW/GSE33341.tsv')
View(test)
test<-read.csv('../../sepsis_data/raw_data/GSE33341_RAW/GSE33341.tsv',sep = '\t')
View(test)
#read the datasets
celltypes<-read.table('../summary_data/cell_types/CombinedLM22.tsv',
sep = '\t', header = TRUE)
# logistic regression model on gene expression that are statistically significant
# associated with mortality
model_glm <- glm(survivor~Mast_cells_resting+Macrophages+T_cells_CD4+age,
data = trainingData, family = 'binomial')
summary(model_glm)
# This will make predictions on the training data that you use to fit the model
# and give me a vector of fitted probabilities.
glm.prob <- predict(model_glm,trainingData,type = 'response')
glm.prob[1:5]
glm.prob[1:5]
glm.prob[1:5]
# turn the probabilities into classifications by thresholding at 0.5
glm.pred <- ifelse(glm.prob > 0.5, 1, 0)
attach(trainingData)
mean(glm.pred == trainingData$survivor)
table(glm.pred,trainingData$survivor)
# Concordance
# higher the concordance, the better is the quality of model
Concordance(trainingData$survivor, glm.prob)
ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
theme(base_size = 16)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
theme_classic(base_size = 16)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
# celltypes
celltypes=celltypes%>%
mutate(APACHE.scores=ifelse(score_type %in% c("APACHE","APACHE_II"),severity_score,NA))
ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
theme_classic(base_size = 16)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
theme_classic(base_size = 16,xlab(''))+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
theme_classic(base_size = 16,xlab = FALSE)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
font("ylab", size = 16) +
font("xy.text", size = 16)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggsave("scores_boxplot.png", plot = score, path = "../figures/", dpi = 300,)
# combine accessions that have APACHE scores
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514','GSE66890')
### plot roc curves for clinical score
# create a empty list, full accessions and corresponding colors
list<-list()
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model.apache, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Predicting Mortality Using Clinical Scores',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .9)
dev.off()
### plot roc curves for clinical score
# create a empty list, full accessions and corresponding colors
list<-list()
# combine accessions that have APACHE scores
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514','GSE66890')
png('../figures/roc_ClinicalScore.png', height = 1800, width = 1800, res = 300)
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model.apache, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Predicting Mortality Using Clinical Scores',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .9)
dev.off()
# clinical score
table(celltypes$score_type)
?ifelse
?mutate
summary(celltypes$APACHE.scores)
table(celltypes$APACHE.scores)
summary(celltypes$severity_score)
summary(celltypes$APACHE.scores)
score <- ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Age") +
font("ylab", size = 16) +
font("xy.text", size = 16)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggsave("scores_boxplot.png", plot = score, path = "../figures/", dpi = 300,)
score <- ggboxplot(celltypes, x = "survivor", y = "APACHE.scores",
order = c('1', '0'),
color = "#2E86C1", add = "jitter",
# add.params = list(size=.2),
bxp.errorbar = TRUE, xlab = FALSE,
ylab = "Clinical Severity Scores") +
font("ylab", size = 16) +
font("xy.text", size = 16)+
scale_x_discrete(labels = c('1' = "Survived", '0' = "Died")) +
stat_compare_means(label = "p.format", label.x.npc = .5, label.y.npc = .9,
size = 5)
ggsave("scores_boxplot.png", plot = score, path = "../figures/", dpi = 300,)
?predict
pred
misClassError(apache.test$survivor,apache.pred)
# Concordance
# higher the concordance, the better is the quality of model
Concordance(trainingData$survivor, glm.prob)
# sensitivity and specificity
sensitivity(trainingData$survivor, glm.prob)
specificity(trainingData$survivor, glm.prob)
mean(glm.pred == trainingData$survivor)
################
################
# logistic regression model on cell types that are statistically significant
# associated with mortality
model_glm <- glm(survivor~Mast_cells_resting+Macrophages+T_cells_CD4,
data = trainingData, family = 'binomial')
# This will make predictions on the training data that you use to fit the model
# and give me a vector of fitted probabilities.
glm.prob <- predict(model_glm,trainingData,type = 'response')
glm.prob[1:5]
# turn the probabilities into classifications by thresholding at 0.5
glm.pred <- ifelse(glm.prob > 0.5, 1, 0)
mean(glm.pred == trainingData$survivor)
for (i in c(5:6,9:35)){
print(names(celltypes)[i])
result = wilcox.test(survivor[,i],death[,i])
print(result)}
###############################
###############################
# logistic regression model on cell types, which are statistically significant
# associated with mortality, and clinical scores
model_glm <- glm(survivor~Mast_cells_resting+Macrophages+T_cells_CD4+APACHE.scores,
data = trainingData, family = 'binomial')
summary(model_glm)
# This will make predictions on the training data that you use to fit the model
# and give me a vector of fitted probabilities.
glm.prob <- predict(model_glm,trainingData,type = 'response')
glm.prob[1:5]
mean(glm.pred == trainingData$survivor)
# Concordance
# higher the concordance, the better is the quality of model
Concordance(trainingData$survivor, glm.prob)
# sensitivity and specificity
sensitivity(trainingData$survivor, glm.prob)
specificity(trainingData$survivor, glm.prob)
# Misclassification Error
# percentage mismatch of predcited vs actuals, irrespective of 1’s or 0’s.
# The lower the misclassification error, the better is your model.
misClassError(trainingData$survivor,glm.prob)
# open a png file
png('../figures/roc_cell+score.png', height = 1800, width = 1800, res = 300)
### plot roc curves
list<-list()
name<-c('E-MTAB-4421','GSE10474','GSE32707','GSE54514','GSE66890')
legend_list<-c()
col_plot<-c()
for (i in 1:length(name)){
test<-celltypes[celltypes$accession == name[i],]
pred<-predict(model_glm, newdata = test, type = "response")
k=match(name[i],full_name)
col_plot<-c(col_plot,col[k])
if (i==1)
{
roc=roc(test$survivor ~ pred, plot = TRUE,
main = 'ROC Curves: Clinical Scores and Cell Types Data',
lwd = 1, col = col[k])
}
else
{
roc=roc(test$survivor ~ pred, plot = TRUE,col = col[k], add = TRUE,
lwd = 1)
}
legend_list<-paste(c(legend_list,paste(name[i],sprintf("AUC = %0.3f", roc$auc))))
}
legend("bottomright",
legend_list,
col = col_plot,
lty = 1, lwd = 2, cex = .9)
dev.off()
